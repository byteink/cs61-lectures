BASEPROGRAMS = msurprise ubsignedinc ubsignedloop \
	ubsignedloopx ubunsignedloop
BASEPROGRAMS_NOOPT = $(patsubst %,%.noopt,$(BASEPROGRAMS))

MEMBENCH_PROGRAMS = mb-malloc
ifneq ($(findstring /,$(shell whereis libjemalloc 2>/dev/null)),)
MEMBENCH_PROGRAMS += mb-jemalloc
endif
ifneq ($(findstring /,$(shell whereis libtcmalloc 2>/dev/null)),)
MEMBENCH_PROGRAMS += mb-tcmalloc
endif
MEMBENCH_PROGRAMS += $(patsubst mb-%.cc,mb-%,$(sort $(wildcard mb-*.cc)))

PROGRAMS = $(BASEPROGRAMS) $(BASEPROGRAMS_NOOPT) $(MEMBENCH_PROGRAMS) \
	attackme attackme.unsafe
all: $(PROGRAMS)

ALLPROGRAMS = $(PROGRAMS)

PIE ?= 0
O ?= 3
COMPILER ?= clang
include ../common/rules.mk

UNSAFEFLAGS := -U_FORTIFY_SOURCE -fno-stack-protector $(if $(ISLINUX),-no-pie,)

%.o: %.cc $(BUILDSTAMP)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(O) $(DEPCFLAGS) -o $@ -c $<

%.opt.o: %.cc $(BUILDSTAMP)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -O3 $(DEPCFLAGS) -o $@ -c $<

%.noopt.o: %.cc $(BUILDSTAMP)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -O0 $(DEPCFLAGS) -o $@ -c $<


$(BASEPROGRAMS): %: %.o hexdump.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(O) -o $@ $^

$(patsubst %,%.opt,$(BASEPROGRAMS)): %.opt: %.opt.o hexdump.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -O3 -o $@ $^

$(patsubst %,%.noopt,$(BASEPROGRAMS)): %.noopt: %.noopt.o hexdump.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -O0 -o $@ $^


attackme.o: attackme.cc $(BUILDSTAMP)
	g++ $(CPPFLAGS) $(CXXFLAGS) -O1 $(DEPCFLAGS) -o $@ -c $<

%.unsafe.o: %.cc $(BUILDSTAMP)
	g++ $(CPPFLAGS) $(UNSAFEFLAGS) $(CXXFLAGS) -O1 $(DEPCFLAGS) -o $@ -c $<

attackme: attackme.o
	g++ $(CXXFLAGS) $(O) $(LDFLAGS) -o $@ $^ $(LIBS)

attackme.unsafe: attackme.unsafe.o
	g++ $(CXXFLAGS) $(UNSAFEFLAGS) $(O) $(LDFLAGS) -o $@ $^ $(LIBS)


mb-%: membench.o mb-%.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(O) -o $@ $^ -lpthread

mb-tcmalloc: membench.o mb-malloc.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(O) -o $@ $^ -lpthread -ltcmalloc

mb-jemalloc: membench.o mb-malloc.o
	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(O) -o $@ $^ -lpthread -ljemalloc


clean:
	rm -rf $(ALLPROGRAMS) *.o $(DEPSDIR)

.PHONY: all clean
